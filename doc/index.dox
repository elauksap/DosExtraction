/**
 * @mainpage Index
 * 
 * @section intro Introduction
 * 
 * This program allows to extract the Density of States (DoS), assessed by mean capacitance-voltage measurements,
 * in an organic semiconductor device. Simulated values are fitted to experimental data. @n
 * Source and header files are written in C++11 language. @n
 * The software is intended to be used on a Unix-like operating system.
 * 
 * @section dependancies Dependancies
 * 
 * The program requires the following software to be installed on your system:
 * 
 * @arg <a href="http://www.cmake.org">CMake</a> (version 2.8 or above), a cross-platform configuration tool;
 * @arg <a href="http://www.gnu.org/software/make">Make</a> (version 3.8.1 or above), a utility to build executables;
 * @arg @anchor GCC <a href="http://www.gnu.org/software/gcc">GCC</a> (version 4.8 or above), the GNU Compiler Collection;
 * @n @n
 * @arg @anchor Eigen <a href="http://eigen.tuxfamily.org">Eigen</a> (version 3.2 or above),
 * to handle with matrices, vectors and linear algebra;
 * @arg @anchor Gnuplot <a href="http://www.gnuplot.info">Gnuplot</a> (version 4.6.4 or above), a graphical utility
 * to generate plots (the package @b gnuplot-x11, a terminal for X servers, is also required for the interactive interface);
 * @arg <a href="http://www.boost.org">Boost</a> (version 1.50 or above), a set of libraries used by @ref gnuplot-iostream;
 * @arg @anchor Doxygen <a href="http://www.doxygen.org">Doxygen</a> (version 1.8.6 or above),
 * a documentation generator (not compulsory).
 * 
 * It also uses the following libraries, shipped in the @a include/ folder:
 * 
 * @arg <a href="http://getpot.sourceforge.net">GetPot</a> (version 1.1.18), to parse command-line and configuration files;
 * @arg @anchor gnuplot-iostream <a href="http://www.stahlke.org/dan/gnuplot-iostream">gnuplot-iostream</a> (version 2),
 * a C++ interface for @ref Gnuplot.
 * 
 * Parallel computing capabilities are provided through the <a href="http://openmp.org">OpenMP</a> library,
 * shipped together with @ref GCC.
 * 
 * @section install_sec Compile
 * 
 * In order to generate a test executable, first open the @a CMakeLists.txt file (in the top-level folder)
 * and, if necessary, edit it to your needs.
 * 
 * Then create a build directory and move into it:
 * 
 * @code
 *     $ mkdir build
 *     $ cd build
 * @endcode
 * 
 * Now you're ready to configure your system:
 * 
 * @code
 *     $ cmake ..
 * @endcode
 * 
 * @note or, if you want the compiler to produce also debug symbols:
 * 
 * @note
 * @code
 *     $ cmake -DCMAKE_BUILD_TYPE=Debug ..
 * @endcode
 * 
 * Finally, start building the project:
 * 
 * @code
 *     $ make
 * @endcode
 * 
 * This will generate the @a test_filename (as specified in the @b TARGET_NAME variable in @a CMakeLists.txt) executable.
 * 
 * Repeat these steps for each test source file you want to compile.
 * 
 * The following command will generate the present documentation, if @ref Doxygen is found to be installed,
 * under the @a doc/ folder (or the one specified in @a CMakeLists.txt), :
 * 
 * @code
 *     $ make doc
 * @endcode
 * 
 * @section configure Set up the configurations
 * 
 * @note The default configuration directory is @a config/.
 * 
 * Before you can run an executable, you have to set up the configuration file (default: @a config.pot).
 * Within it you can find a list of parameters, each of which is commented out to explain what
 * modifying it will entail. @n
 * Particularly, the variables @a input_params and @a input_experim can be set, i.e. the filenames
 * where to find input fitting parameters and experimental data respectively.
 * It's recommended (but not compulsory) to put these files in the same directory as the configuration
 * file (otherwise you can specify a relative or absolute path to them).
 * 
 * @warning The program never checks that the input values are numeric but will always cast them to
 * floating point numbers, then please pay attention while setting up the variable @a skipHeaders.
 * 
 * You can create multiple configuration files, each with different parameter values: the one you
 * aim to use can be specified in the command-line before running.
 * 
 * @section run Run!
 * 
 * Executables are placed under the @a bin/ directory (or the one specified in @a CMakeLists.txt). @n
 * @n
 * To run by using the default configuration filename (@a config.pot) simply move into the @a bin/ directory
 * and execute:
 * 
 * @code
 *     $ ./test_filename
 * @endcode
 * 
 * To specify a different configuration file previously saved in the configuration directory:
 * 
 * @code
 *     $ ./test_filename -f configuration_filename
 * @endcode
 * 
 * or:
 * 
 * @code
 *     $ ./test_filename --file configuration_filename
 * @endcode
 * 
 * The variable @a configuration_filename should @b not contain the path.
 * 
 * @warning Furthermore, if you run the program from a different folder than @a bin/ or if you chose a different configuration
 * directory, you have also to manually specify the path to the configuration directory (either absolute or relative to the
 * current directory) by using:
 * 
 * @warning
 * @code
 *     $ ./test_filename -d configuration_directory
 * @endcode
 * 
 * @warning or:
 * 
 * @warning
 * @code
 *     $ ./test_filename --directory configuration_directory
 * @endcode
 * 
 * Once complete, the results of the simulation(s) will be saved in the output directory (relative to @a bin/) specified
 * in the configuration file (default: @a output/). @n
 * @ref Gnuplot scripts are saved too for later re-use under the @a gnuplot/ subdirectory; you can run them through:
 * 
 * @code
 *     $ gnuplot name_of_the_script
 * @endcode
 * 
 */
